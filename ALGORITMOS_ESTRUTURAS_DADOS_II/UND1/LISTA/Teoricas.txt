Q6 -)
    Sendo o cálculo do fatorial recursivo definido da seguinte forma, onde x e N.Caso base: se x =0, fat(0) = 1. 
    Caso contrário fat(x>0) = x * fat( x-1 ). 
    
    - Exemplificando com fat(3):
        fat(3) = 3 * fat(2) ->chamada recursiva
        fat(3) = 3 * 2 * fat(1) -> chamada recursiva
        fat(3) = 3 * 2 * 1 * fat(0) ->chamada recursiva
        fat(3) = 3 * 2 * (1 * 1) -> retorno recursivo
        fat(3) = 3 * (2 * 1)
        fat(3) = (3 * 2)
        fat (3) = 6 -> Retorno da função.

Q7 -) 
    Esta pode ser uma das etapas do processo recursivo de verificação. Porém ainda é preciso adicionar uma camada de validação de 
    acordo com as 3 regras: Se o ano for divisível por 4 ele é bissexto, caso  contrário é necessário verificar que se for divisivel
    por 100 ele não será bissexto ao menos que seja divisível por 400.

Q8 -) ?

Q9 -) ?

Q14 -) 
    a) A notação O(n²) descreve uma função que cresce quadraticamente com o tamanho da entrada n. Se uma função f(n) tem complexidade
    O(n²), isso significa que existe uma constante C e um valor n0 ​tal que para todos n≥n0,a função f(n) é no máximo C⋅n². Em outras 
    palavras, a função f(n) é limitada superiormente por uma função quadrática para grandes valores de n.
    
    b) A notação Θ(nlogn) indica que o tempo de execução do algoritmo cresce como  nlogn. A notação Θ descreve uma limitação superior e 
    inferior exata, o que significa que o tempo de execução do algoritmo está rigidamente entre duas funções lineares proporcionais a 
    n logn. Em termos práticos, isso implica que o tempo de execução do algoritmo é assintoticamente nlogn para grandes entradas, tanto no melhor quanto no pior caso.
    
    c) Complexidade O(n): A função cresce linearmente com o tamanho da entrada. Para grandes valores de n, a função que cresce linearmente 
    será mais eficiente do que uma função que cresce quadraticamente. Complexidade  Θ(n²): A função cresce quadraticamente com o tamanho da
    entrada. Isso significa que, para entradas grandes, o tempo de execução será muito maior comparado com uma função linear.
